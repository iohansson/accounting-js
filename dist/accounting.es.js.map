{"version":3,"file":"accounting.es.js","sources":["../lib/settings.js","../lib/unformat.js","../lib/internal/checkPrecision.js","../lib/toFixed.js","../node_modules/object-assign/index.js","../lib/internal/stripInsignificantZeros.js","../lib/formatNumber.js","../node_modules/is-string/index.js","../lib/internal/checkCurrencyFormat.js","../lib/formatMoney.js","../lib/formatColumn.js"],"sourcesContent":["/**\n * The library's settings configuration interface.\n *\n * @typedef {Object} Settings\n * @property {String} [symbol='$'] - Currency symbol\n * @property {String|CurrencyFormat} [format='%s%v'] - Controls output: %s = symbol, %v = value (can be object, see docs)\n * @property {String} [decimal='.'] - Decimal point separator\n * @property {String} [thousand=','] - Thousands separator\n * @property {Number} [precision=2] - Number of decimal places to round the amount to\n * @property {Number} [grouping=3] - Digit grouping (not implemented yet)\n * @property {Boolean} [stripZeros=false] - Strip insignificant zeros from decimal part\n * @property {Float} [fallback=0] - Value returned on unformat() failure\n * @property {Number} [round=0] - Decide round direction.\n */\n\n/**\n * Currency format interface.\n *\n * Each property represents template string used by formatMoney.\n * Inside this template you can use these patterns:\n * - **%s** - Currency symbol\n * - **%v** - Amount\n *\n * **Examples**:\n * ```js\n * '%s %v'   => '$ 1.00'\n * '%s (%v)' => '$ (1.00)'\n * '%s  -- ' => '$  --'\n * ```\n *\n * @typedef {Format} CurrencyFormat\n * @property {String} pos - Currency format for positive values\n * @property {String} [neg=pos] - Currency format for positive values\n * @property {String} [zero=pos] - Currency format for positive values\n *\n */\n\n/**\n * The library's default settings configuration object.\n * Contains default parameters for currency and number formatting.\n *\n * @type {Settings} settings\n */\nconst settings = {\n  symbol: '$',\n  format: '%s%v',\n  decimal: '.',\n  thousand: ',',\n  precision: 2,\n  grouping: 3,\n  stripZeros: false,\n  fallback: 0,\n  round: 0\n};\n\nexport default settings;\n","import settings from './settings';\n\n/**\n * Takes a string/array of strings, removes all formatting/cruft and returns the raw float value.\n *\n * Decimal must be included in the regular expression to match floats (defaults to\n * `settings.decimal`), so if the number uses a non-standard decimal\n * separator, provide it as the second argument.\n *\n * Also matches bracketed negatives (eg. `'$ (1.99)' => -1.99`).\n *\n * Doesn't throw any errors (`NaN`s become 0 or provided by fallback value).\n *\n * _Alias_: `parse(value, decimal, fallback)`\n *\n * **Usage:**\n *\n * ```js\n * unformat('Â£ 12,345,678.90 GBP');\n * // => 12345678.9\n * ```\n *\n * @access public\n * @param {String|Array<String>} value - String or array of strings containing the number/s to parse\n * @param {Number} [decimal=settings.decimal] - Number of decimal digits of the resultant number\n * @param {Float} [fallback=settings.fallback] - Value returned on unformat() failure\n * @return {Float} - Parsed number\n */\nfunction unformat(value, decimal = settings.decimal, fallback = settings.fallback) {\n  // Recursively unformat arrays:\n  if (Array.isArray(value)) {\n    return value.map((val) => unformat(val, decimal, fallback));\n  }\n\n  // Return the value as-is if it's already a number\n  if (typeof value === 'number') return value;\n\n   // Build regex to strip out everything except digits, decimal point and minus sign\n  const regex = new RegExp('[^0-9-(-)-' + decimal + ']', ['g']);\n  const unformattedValueString =\n      ('' + value)\n      .replace(regex, '')         // strip out any cruft\n      .replace(decimal, '.')      // make sure decimal point is standard\n      .replace(/\\(([-]*\\d*[^)]?\\d+)\\)/g, '-$1') // replace bracketed values with negatives\n      .replace(/\\((.*)\\)/, '');   // remove any brackets that do not have numeric value\n\n  /**\n   * Handling -ve number and bracket, eg.\n   * (-100) = 100, -(100) = 100, --100 = 100\n   */\n  const negative = (unformattedValueString.match(/-/g) || 2).length % 2,\n    absUnformatted = parseFloat(unformattedValueString.replace(/-/g, '')),\n    unformatted = absUnformatted * ((negative) ? -1 : 1);\n\n  // This will fail silently which may cause trouble, let's wait and see\n  return !isNaN(unformatted) ? unformatted : fallback;\n}\n\nexport default unformat;\n","/**\n * Check and normalise the value of precision (must be positive integer).\n */\nfunction checkPrecision(val, base) {\n  val = Math.round(Math.abs(val));\n  return isNaN(val) ? base : val;\n}\n\nexport default checkPrecision;\n","import checkPrecision from './internal/checkPrecision';\nimport settings from './settings';\n\n/**\n * Implementation of toFixed() that treats floats more like decimals.\n *\n * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n * problems for accounting- and finance-related software.\n *\n * **Usage:**\n *\n * ```js\n * // Native toFixed has rounding issues\n * (0.615).toFixed(2);\n * // => '0.61'\n *\n * // With accounting-js\n * toFixed(0.615, 2);\n * // => '0.62'\n * ```\n *\n * @access public\n * @param {Float} value - Float to be treated as a decimal number\n * @param {Number} [precision=settings.precision] - Number of decimal digits to keep\n * @param {Number} [round=settings.round] - Decide round direction\n * @return {String} - Given number transformed into a string with the given precission\n */\nfunction toFixed(value, precision, round) {\n  precision = checkPrecision(precision, settings.precision);\n  const power = Math.pow(10, precision);\n\n\n  let roundMethod;\n  if (round > 0) {\n    roundMethod = Math.ceil;\n  } else if (round < 0) {\n    roundMethod = Math.floor;\n  } else {\n    roundMethod = Math.round;\n  }\n  // Multiply up by precision, round accurately, then divide and use native toFixed()\n  return (roundMethod((value + 1e-11) * power) / power).toFixed(precision);\n}\n\nexport default toFixed;\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","\nfunction stripInsignificantZeros(str, decimal) {\n  const parts = str.split(decimal);\n  const integerPart = parts[0];\n  const decimalPart = parts[1].replace(/0+$/, '');\n\n  if (decimalPart.length > 0) {\n    return integerPart + decimal + decimalPart;\n  }\n\n  return integerPart;\n}\n\nexport default stripInsignificantZeros;\n","import objectAssign from 'object-assign';\n\nimport stripInsignificantZeros from './internal/stripInsignificantZeros';\nimport settings from './settings';\nimport toFixed from './toFixed';\n\n/**\n * Format a number, with comma-separated thousands and custom precision/decimal places.\n *\n * _Alias_: `format(number, opts)`\n *\n * **Usage:**\n *\n * ```js\n * // Default usage\n * formatNumber(5318008);\n * // => 5,318,008\n *\n * // Custom format\n * formatNumber(9876543.21, { precision: 3, thousand: \" \" });\n * // => 9 876 543.210\n * ```\n *\n * @access public\n * @param {Number} number - Number to be formatted\n * @param {Object} [opts={}] - Object containing all the options of the method\n * @return {String} - Given number properly formatted\n  */\nfunction formatNumber(number, opts = {}) {\n  // Resursively format arrays:\n  if (Array.isArray(number)) {\n    return number.map((val) => formatNumber(val, opts));\n  }\n\n  // Build options object from second param (if object) or all params, extending defaults\n  opts = objectAssign({},\n    settings,\n    opts\n  );\n\n  // Do some calc\n  const negative = number < 0 ? '-' : '';\n  const base = parseInt(toFixed(Math.abs(number), opts.precision, opts.round), 10) + '';\n  const mod = base.length > 3 ? base.length % 3 : 0;\n\n  // Format the number\n  const formatted = negative +\n    (mod ? base.substr(0, mod) + opts.thousand : '') +\n      base.substr(mod).replace(/(\\d{3})(?=\\d)/g, '$1' + opts.thousand) +\n        (opts.precision > 0 ? opts.decimal + toFixed(Math.abs(number), opts.precision).split('.')[1] : '');\n\n  return opts.stripZeros ? stripInsignificantZeros(formatted, opts.decimal) : formatted;\n}\n\nexport default formatNumber;\n","'use strict';\n\nvar strValue = String.prototype.valueOf;\nvar tryStringObject = function tryStringObject(value) {\n\ttry {\n\t\tstrValue.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar strClass = '[object String]';\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nmodule.exports = function isString(value) {\n\tif (typeof value === 'string') { return true; }\n\tif (typeof value !== 'object') { return false; }\n\treturn hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass;\n};\n","import isString from 'is-string';\n\n/**\n * Parses a format string or object and returns format obj for use in rendering.\n *\n * `format` is either a string with the default (positive) format, or object\n * containing `pos` (required), `neg` and `zero` values.\n *\n * Either string or format.pos must contain '%v' (value) to be valid.\n *\n * @private\n * @param {String} [format='%s%v'] - String with the format to apply, where %s is the currency symbol and %v is the value\n * @return {Object} object represnting format (with pos, neg and zero attributes)\n */\nfunction checkCurrencyFormat(format) {\n  // Format should be a string, in which case `value` ('%v') must be present\n  if (isString(format) && format.match('%v')) {\n    // Create and return positive, negative and zero formats\n    return {\n      pos: format,\n      neg: format.replace('-', '').replace('%v', '-%v'),\n      zero: format\n    };\n  }\n\n  // Otherwise, assume format was fine\n  return format;\n}\n\nexport default checkCurrencyFormat;\n","import objectAssign from 'object-assign';\n\nimport checkCurrencyFormat from './internal/checkCurrencyFormat';\nimport settings from './settings';\nimport formatNumber from './formatNumber';\n\n/**\n * Format a number into currency.\n *\n * **Usage:**\n *\n * ```js\n * // Default usage\n * formatMoney(12345678);\n * // => $12,345,678.00\n *\n * // European formatting (custom symbol and separators)\n * formatMoney(4999.99, { symbol: \"â¬\", precision: 2, thousand: \".\", decimal: \",\" });\n * // => â¬4.999,99\n *\n * // Negative values can be formatted nicely\n * formatMoney(-500000, { symbol: \"Â£ \", precision: 0 });\n * // => Â£ -500,000\n *\n * // Simple `format` string allows control of symbol position (%v = value, %s = symbol)\n * formatMoney(5318008, { symbol: \"GBP\",  format: \"%v %s\" });\n * // => 5,318,008.00 GBP\n * ```\n *\n * @access public\n * @param {Number} amount - Amount to be formatted\n * @param {Object} [opts={}] - Object containing all the options of the method\n * @return {String} - Given number properly formatted as money\n */\nfunction formatMoney(amount, opts = {}) {\n  // Resursively format arrays\n  if (Array.isArray(amount)) {\n    return amount.map((value) => formatMoney(value, opts));\n  }\n\n  // Build options object from second param (if object) or all params, extending defaults\n  opts = objectAssign({},\n    settings,\n    opts\n  );\n\n  // Check format (returns object with pos, neg and zero)\n  const formats = checkCurrencyFormat(opts.format);\n\n  // Choose which format to use for this value\n  let useFormat;\n\n  if (amount > 0) {\n    useFormat = formats.pos;\n  } else if (amount < 0) {\n    useFormat = formats.neg;\n  } else {\n    useFormat = formats.zero;\n  }\n\n  // Return with currency symbol added\n  return useFormat\n    .replace('%s', opts.symbol)\n    .replace('%v', formatNumber(Math.abs(amount), opts));\n}\n\nexport default formatMoney;\n","import objectAssign from 'object-assign';\nimport isString from 'is-string';\n\nimport checkCurrencyFormat from './internal/checkCurrencyFormat';\nimport settings from './settings';\nimport formatNumber from './formatNumber';\nimport unformat from './unformat';\n\n/**\n * Format a list of numbers into an accounting column, padding with whitespace\n * to line up currency symbols, thousand separators and decimals places.\n *\n * Returns array of accouting-formatted number strings of same length.\n *\n * NB: `white-space:pre` CSS rule is required on the list container to prevent\n * browsers from collapsing the whitespace in the output strings.\n *\n * **Usage:**\n *\n * ```js\n * formatColumn([123.5, 3456.49, 777888.99, 12345678, -5432], { symbol: \"$ \" });\n * ```\n *\n * @access public\n * @param {Array<Number>} list - Array of numbers to format\n * @param {Object} [opts={}] - Object containing all the options of the method\n * @return {Array<String>} - Array of accouting-formatted number strings of same length\n */\nfunction formatColumn(list, opts = {}) {\n  if (!list) return [];\n\n  // Build options object from second param (if object) or all params, extending defaults\n  opts = objectAssign({},\n    settings,\n    opts\n  );\n\n  // Check format (returns object with pos, neg and zero), only need pos for now\n  const formats = checkCurrencyFormat(opts.format);\n\n  // Whether to pad at start of string or after currency symbol\n  const padAfterSymbol = formats.pos.indexOf('%s') < formats.pos.indexOf('%v');\n\n  // Store value for the length of the longest string in the column\n  let maxLength = 0;\n\n  // Format the list according to options, store the length of the longest string\n  const formatted = list.map((val) => {\n    if (Array.isArray(val)) {\n      // Recursively format columns if list is a multi-dimensional array\n      return formatColumn(val, opts);\n    }\n    // Clean up the value\n    val = unformat(val, opts.decimal);\n\n    // Choose which format to use for this value (pos, neg or zero)\n    let useFormat;\n\n    if (val > 0) {\n      useFormat = formats.pos;\n    } else if (val < 0) {\n      useFormat = formats.neg;\n    } else {\n      useFormat = formats.zero;\n    }\n\n    // Format this value, push into formatted list and save the length\n    const fVal = useFormat\n      .replace('%s', opts.symbol)\n      .replace('%v', formatNumber(Math.abs(val), opts));\n\n    if (fVal.length > maxLength) {\n      maxLength = fVal.length;\n    }\n\n    return fVal;\n  });\n\n  // Pad each number in the list and send back the column of numbers\n  return formatted.map((val) => {\n    // Only if this is a string (not a nested array, which would have already been padded)\n    if (isString(val) && val.length < maxLength) {\n      // Depending on symbol position, pad after symbol or at index 0\n      return padAfterSymbol ?\n        val.replace(opts.symbol, opts.symbol + (new Array(maxLength - val.length + 1).join(' '))) :\n        (new Array(maxLength - val.length + 1).join(' ')) + val;\n    }\n    return val;\n  });\n}\n\nexport default formatColumn;\n"],"names":["settings","unformat","value","decimal","fallback","Array","isArray","map","val","regex","RegExp","unformattedValueString","replace","negative","match","length","absUnformatted","parseFloat","unformatted","isNaN","checkPrecision","base","Math","round","abs","toFixed","precision","power","pow","roundMethod","ceil","floor","stripInsignificantZeros","str","parts","split","integerPart","decimalPart","formatNumber","number","opts","objectAssign","parseInt","mod","formatted","substr","thousand","stripZeros","checkCurrencyFormat","format","isString","formatMoney","amount","formats","useFormat","pos","neg","zero","symbol","formatColumn","list","padAfterSymbol","indexOf","maxLength","fVal","join"],"mappings":"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"}